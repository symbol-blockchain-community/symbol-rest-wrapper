# coding: utf-8

"""
    Symbol REST Wrapper

    API server that makes development more convenient

    The version of the OpenAPI document: 0.0.1
    Contact: ym.u.ichiro@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.account_activity_buckets_inner import AccountActivityBucketsInner
from openapi_client.models.account_supplemental_public_keys import AccountSupplementalPublicKeys
from openapi_client.models.mosaic import Mosaic
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Account(BaseModel):
    """
    mosaic 数量等を変換したアカウントオブジェクト
    """ # noqa: E501
    version: Union[StrictFloat, StrictInt]
    address: StrictStr
    address_height: Union[StrictFloat, StrictInt] = Field(alias="addressHeight")
    public_key: StrictStr = Field(alias="publicKey")
    public_key_height: Union[StrictFloat, StrictInt] = Field(alias="publicKeyHeight")
    account_type: Union[StrictFloat, StrictInt] = Field(alias="accountType")
    supplemental_public_keys: AccountSupplementalPublicKeys = Field(alias="supplementalPublicKeys")
    activity_buckets: List[AccountActivityBucketsInner] = Field(alias="activityBuckets")
    mosaics: List[Mosaic]
    importance: Union[StrictFloat, StrictInt]
    importance_height: Union[StrictFloat, StrictInt] = Field(alias="importanceHeight")
    __properties: ClassVar[List[str]] = ["version", "address", "addressHeight", "publicKey", "publicKeyHeight", "accountType", "supplementalPublicKeys", "activityBuckets", "mosaics", "importance", "importanceHeight"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supplemental_public_keys
        if self.supplemental_public_keys:
            _dict['supplementalPublicKeys'] = self.supplemental_public_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in activity_buckets (list)
        _items = []
        if self.activity_buckets:
            for _item in self.activity_buckets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activityBuckets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mosaics (list)
        _items = []
        if self.mosaics:
            for _item in self.mosaics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mosaics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "address": obj.get("address"),
            "addressHeight": obj.get("addressHeight"),
            "publicKey": obj.get("publicKey"),
            "publicKeyHeight": obj.get("publicKeyHeight"),
            "accountType": obj.get("accountType"),
            "supplementalPublicKeys": AccountSupplementalPublicKeys.from_dict(obj.get("supplementalPublicKeys")) if obj.get("supplementalPublicKeys") is not None else None,
            "activityBuckets": [AccountActivityBucketsInner.from_dict(_item) for _item in obj.get("activityBuckets")] if obj.get("activityBuckets") is not None else None,
            "mosaics": [Mosaic.from_dict(_item) for _item in obj.get("mosaics")] if obj.get("mosaics") is not None else None,
            "importance": obj.get("importance"),
            "importanceHeight": obj.get("importanceHeight")
        })
        return _obj


