# coding: utf-8

"""
    Symbol REST Wrapper

    API server that makes development more convenient

    The version of the OpenAPI document: 0.0.1
    Contact: ym.u.ichiro@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.account import Account

class TestAccount(unittest.TestCase):
    """Account unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Account:
        """Test Account
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Account`
        """
        model = Account()
        if include_optional:
            return Account(
                version = 1.337,
                address = '',
                address_height = 1.337,
                public_key = '',
                public_key_height = 1.337,
                account_type = 1.337,
                supplemental_public_keys = openapi_client.models.account_supplemental_public_keys.Account_supplementalPublicKeys(
                    linked = openapi_client.models.account_supplemental_public_keys_linked.Account_supplementalPublicKeys_linked(
                        public_key = '', ), 
                    node = openapi_client.models.account_supplemental_public_keys_linked.Account_supplementalPublicKeys_linked(
                        public_key = '', ), 
                    vrf = , 
                    voting = openapi_client.models.account_supplemental_public_keys_voting.Account_supplementalPublicKeys_voting(
                        public_keys = [
                            openapi_client.models.account_supplemental_public_keys_voting_public_keys_inner.Account_supplementalPublicKeys_voting_publicKeys_inner(
                                public_key = '', 
                                start_epoch = 1.337, 
                                end_epoc = 1.337, )
                            ], ), ),
                activity_buckets = [
                    openapi_client.models.account_activity_buckets_inner.Account_activityBuckets_inner(
                        start_height = 1.337, 
                        total_fees_paid = 1.337, 
                        beneficiary_count = 1.337, 
                        raw_scope = 1.337, )
                    ],
                mosaics = [
                    openapi_client.models.account_mosaics_inner.Account_mosaics_inner(
                        id = '', 
                        amount = 1.337, )
                    ],
                importance = 1.337,
                importance_height = 1.337
            )
        else:
            return Account(
                version = 1.337,
                address = '',
                address_height = 1.337,
                public_key = '',
                public_key_height = 1.337,
                account_type = 1.337,
                supplemental_public_keys = openapi_client.models.account_supplemental_public_keys.Account_supplementalPublicKeys(
                    linked = openapi_client.models.account_supplemental_public_keys_linked.Account_supplementalPublicKeys_linked(
                        public_key = '', ), 
                    node = openapi_client.models.account_supplemental_public_keys_linked.Account_supplementalPublicKeys_linked(
                        public_key = '', ), 
                    vrf = , 
                    voting = openapi_client.models.account_supplemental_public_keys_voting.Account_supplementalPublicKeys_voting(
                        public_keys = [
                            openapi_client.models.account_supplemental_public_keys_voting_public_keys_inner.Account_supplementalPublicKeys_voting_publicKeys_inner(
                                public_key = '', 
                                start_epoch = 1.337, 
                                end_epoc = 1.337, )
                            ], ), ),
                activity_buckets = [
                    openapi_client.models.account_activity_buckets_inner.Account_activityBuckets_inner(
                        start_height = 1.337, 
                        total_fees_paid = 1.337, 
                        beneficiary_count = 1.337, 
                        raw_scope = 1.337, )
                    ],
                mosaics = [
                    openapi_client.models.account_mosaics_inner.Account_mosaics_inner(
                        id = '', 
                        amount = 1.337, )
                    ],
                importance = 1.337,
                importance_height = 1.337,
        )
        """

    def testAccount(self):
        """Test Account"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
